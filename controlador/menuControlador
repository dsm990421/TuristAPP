'use strict'

const bcrypt = require('bcrypt');
var menusModelo = require('../modelo/menu');
const uploadImage = require('../helpers/uploadImage');
var fs = require('fs');
var path = require('path');
const eliminarImg = require('../helpers/eliminarImg');

let registrarServicio = (req, res) => {
    var menus = new menusModelo();
    menus.nombre = req.body.nombre;
    menus.precio = req.body.precio;
    menus.descripcion = req.body.descripcion;
    menus.negocio = req.body.negocio;
    menus.imagen = 'null';

    if (menus.nombre != null && menus.precio != null && menus.descripcion != null && menus.negocio) {
        //guardar el ususario en BD
        menus.save((err, menuAlmacenado) => {
            if (err) {
                res.status(500).send({ mesagge: 'Error al guardar el servicio' });
            } else {
                if (!menuAlmacenado) {
                    res.status(404).send({ mesagge: 'No se ha registrado el servicio' });
                } else {
                    //nos devuelve un objeto con los datos del ususario guardado
                    res.status(200).send(menuAlmacenado);
                }
            }

        });
    } else {
        res.status(200).send({ mesagge: 'Introduce todos los campos' });
    }
}

let actualizarServicio = (req, res) => {
    var menuId = req.params.id; //GET
    var update = req.body //POST

    menusModelo.findByIdAndUpdate(menuId, update, (err, menuUpdate) => {
        if (err) {
            res.status(500).send({ message: 'Error al actualizar el usuario en el servidor' });
        } else {
            if (!menuUpdate) {
                res.status(404).send({ message: 'No se ha podido encontar el usuario' });
            } else {
                res.status(200).send(menuUpdate);
            }
        }
    });
}

let eliminarServicio = (req, res) => {
    var id = req.params.id;
    menusModelo.findByIdAndRemove(id, (err, menu) => {
        if (err) {
            res.status(500).send({ mesagge: 'Error en la peticion' });
        } else {
            res.status(200).send({ mesagge: 'Servicio Eliminado' })
        }
    })

}

let obtenerServicios = (req, res) => {
    var negocios = req.params.negocio
    menusModelo.find({ negocio: negocios }, (error, negocioss) => {
        if (error) {
            res.status(404).send("No hay negocios en esta zona")
        } else {
            res.status(200).send(negocioss);
        }
    })
}

let datoServicio = (req, res) => {
    var id = req.params.id;
    menusModelo.findById(id, (error, servicios) => {
        if (error) {
            res.status(404).send("No hay negocios")
        } else {
            res.status(200).send(servicios);
        }
    })
}


let getFoto = (req, res) => {
    var imageFile = req.params.imageFile;
    var rutaFoto = './cargas/menu/' + imageFile;
    console.log(imageFile);
    fs.exists(rutaFoto, (existe) => {
        if (existe) {
            res.sendFile(path.resolve(rutaFoto));
        } else {
            res.status(404).send({ mesagge: 'No has cargado una imagen con ese nombre' });
        }
    })

}

let ActualizarFoto2 = async(req, res) => {
    var idMenu = req.params.id;
    const imagenBase64 = req.body.imagen ? req.body.imagen : '';
    let imagenNueva;
    const menuActualizar = await menusModelo.findById(idMenu).exec();
    // Validar que exista la imagen -> Subida de imagenes base64
    if (imagenBase64.length) {
        imagenNueva = uploadImage(imagenBase64, 'servicio');
        console.log(imagenNueva);
    } else imagenNueva = menuActualizar.imagen;
    menusModelo.findByIdAndUpdate(idMenu, { imagen: imagenNueva }, (err, user) => {
        if (err) {
            res.status(500).send({ mesagge: 'Error al buscar el usuario' });
        }
        if (!user) {
            res.status(404).send({ mesagge: 'Error en el id' });
        } else {
            res.status(200).send({
                image: imagenNueva,
                user: user
            });
        }
    })

}


module.exports = {
    registrarServicio,
    actualizarServicio,
    eliminarServicio,
    obtenerServicios,
    datoServicio,
    getFoto,
    ActualizarFoto2
};